setwd("~/GitHub/RprogAssign3")
rm(list=ls())
rankall <- function(outcome, num = "best") {
require(dplyr)
## read outcome data in downloaded csv file
outcome.df <- read.csv("Assignment3-data/outcome-of-care-measures.csv",
colClasses="character",
na.strings = "Not Available")
## subset columns of interest: hospital, state and three disease outcomes
mortality <- outcome.df[, c(2, 7, 11,17,23)]
## fix numeric values (now columns: 3:5)
m.df <- sapply(3:5, function(x) as.numeric(mortality[,x]))
mortality <- cbind(mortality[,1:2],m.df)
colnames(mortality) <- c("hospital", "state", "heart_attack",
"heart_failure","pneumonia")
## check the 'outcome' arguments is valid; stop() and
### return "invalid outcome" for bad input,
### "missing argment" if missing argument)
if(missing(outcome)) stop("missing argument")
outcome = tolower(outcome)
diseases <- c("heart attack","heart failure","pneumonia")
if(is.na(diseases[match(outcome,diseases)])) stop("invalid outcome")
## sub "_" for space in disease (outcome) name
disease <- sub("\\s+","_",outcome)
## create a vector of valid state names
states <- as.character(sort(unique(mortality$state)))
mort_df <- tbl_df(mortality)
states.list <- lapply(states, function(x) mort_df[mort_df$state == x,c(1,2,3)])
## create list of states with outcome rank = num
output.list <- lapply( 1:length(states), function(x,y,z) FUN={
mystate_df <- states.list[[x]]
colnames(mystate_df) <- c("hospital","state","disease")
if(disease == "heart_attack") {
filter_s_df <- filter(mystate_df,!is.na(disease))
sorted_s_df = arrange(filter_s_df,disease,hospital)
ifelse(num == "worst", num <<- length(filter_s_df$disease), num)
sorted_s_df[num,1:2]
}
if(disease == "heart_failure") {
filter_s_df <- filter(mystate_df,!is.na(disease))
sorted_s_df = arrange(filter_s_df,disease,hospital)
ifelse(num == "worst", num <<- length(filter_s_df$disease), num)
sorted_s_df[num,1:2]
}
if(disease == "pneumonia") {
filter_s_df <- filter(mystate_df,!is.na(disease))
sorted_s_df = arrange(filter_s_df,disease,hospital)
ifelse(num == "worst", num <<- length(filter_s_df$disease), num)
sorted_s_df[num,1:2]
}
}, y=disease, z=num)
output.df <- rbind_all(output.list)
}
head(rankall("heart attack",20),10)
library(dplyr)
head(rankall("heart attack",20),10)
ls()
rm(rankall)
source('~/GitHub/RprogAssign3/rankall.R')
head(rankall("heart attack",20),10)
diseases
diseases <- c("heart attack","heart failure","pneumonia")
disease.cols <- sapply(diseases, sub("\\s+","_",x))
disease.cols <- sapply(diseases, function(x) sub("\\s+","_",x))
disease.cols
class(disease.cols)
disease.cols[1]
disease.cols <- as.vector(sapply(diseases, function(x) sub("\\s+","_",x)))
class(disease.cols)
disease.cols[1]
rm(list=ls())
outcome.df <- read.csv("Assignment3-data/outcome-of-care-measures.csv",
colClasses="character",
na.strings = "Not Available")
## subset columns of interest: hospital, state and three disease outcomes
mortality <- outcome.df[, c(2, 7, 11,17,23)]
## fix numeric values (now columns: 3:5)
m.df <- sapply(3:5, function(x) as.numeric(mortality[,x]))
mortality <- cbind(mortality[,1:2],m.df)
colnames(mortality) <- c("hospital", "state", "heart_attack",
"heart_failure","pneumonia")
ls()
outcome <- "heart failure"
rum = 10
rm(rum)
num = 10
mortality <- cbind(mortality[,1:2],m.df)
colnames(mortality) <- c("hospital", "state", "heart_attack",
"heart_failure","pneumonia")
## check the 'outcome' arguments is valid; stop() and
### return "invalid outcome" for bad input,
### "missing argment" if missing argument)
if(missing(outcome)) stop("missing argument")
outcome = tolower(outcome)
diseases <- c("heart attack","heart failure","pneumonia")
if(is.na(diseases[match(outcome,diseases)])) stop("invalid outcome")
## sub "_" for space in disease (outcome) name
disease <- sub("\\s+","_",outcome)
## create a vector of valid state names
states <- as.character(sort(unique(mortality$state)))
mort_df <- tbl_df(mortality)
states.list <- lapply(states, function(x) mort_df[mort_df$state == x,c(1,2,3)])
mystate_df <- states.list[[x]]
x <- 43
mystate_df <- states.list[[x]]
colnames(mystate_df) <- c("hospital","state","disease")
disease
filter_s_df <- filter(mystate_df,!is.na(disease))
head(filter_s_df)
sorted_s_df = arrange(filter_s_df,disease,hospital)
head(sorted_s_df)
ifelse(num == "worst", num <<- length(filter_s_df$disease), num)
sorted_s_df[num,1:2]
source('~/GitHub/RprogAssign3/rankall.R')
ls()
rm(rankall)
source('~/GitHub/RprogAssign3/rankall.R')
ls()
head(rankall("heart attack",20),10)
tail(rankall("pneumonia","worst"),3)
tail(rankall("heart failure"),10)
mystate_df
head(mystate_df)
head(mystate_df)
disease.cols <- as.vector(sapply(diseases, function(x) sub("\\s+","_",x)))
disease.cols
disease
rm(list=ls())
outcome.df <- read.csv("Assignment3-data/outcome-of-care-measures.csv",
colClasses="character",
na.strings = "Not Available")
## subset columns of interest: hospital, state and three disease outcomes
mortality <- outcome.df[, c(2, 7, 11,17,23)]
outcome <- "pneumonia"
num <- "worst"
## fix numeric values (now columns: 3:5)
m.df <- sapply(3:5, function(x) as.numeric(mortality[,x]))
mortality <- cbind(mortality[,1:2],m.df)
colnames(mortality) <- c("hospital", "state", "heart_attack",
"heart_failure","pneumonia")
## check the 'outcome' arguments is valid; stop() and
### return "invalid outcome" for bad input,
### "missing argment" if missing argument)
if(missing(outcome)) stop("missing argument")
outcome = tolower(outcome)
diseases <- c("heart attack","heart failure","pneumonia")
if(is.na(diseases[match(outcome,diseases)])) stop("invalid outcome")
## sub "_" for space in disease (outcome) name
disease <- sub("\\s+","_",outcome)
## create a vector of valid state names
disease
states <- as.character(sort(unique(mortality$state)))
mort_df <- tbl_df(mortality)
states.list <- lapply(states, function(x) mort_df[mort_df$state == x,c(1,2,3)])
disease.cols <- as.vector(sapply(diseases, function(x) sub("\\s+","_",x)))
x <- 53
mystate_df <- states.list[[x]]
head(mystate_df)
head(mort_df)
disease.cols <- as.vector(sapply(diseases, function(x) sub("\\s+","_",x)))
disease.cols
disease
col_disease <- match(disease,disease.cols)
col_disease
disease.cols <- as.vector(sapply(colnames(mort_df), function(x) sub("\\s+","_",x)))
col_disease <- match(disease,disease.cols)
col_disease
rm(list=ls())
source('~/GitHub/RprogAssign3/rankall.R')
head(rankall("heart attack",20),10)
tail(rankall("pneumonia","worst"),3)
tail(rankall("heart failure"),10)
rm(list=ls())
source('~/GitHub/RprogAssign3/rankall.R')
head(rankall("heart attack",20),10)
tail(rankall("pneumonia","worst"),3)
tail(rankall("heart failure"),10)
tail(rankall("heart failure"),20)
source('~/GitHub/RprogAssign3/rankall.R')
tail(rankall("pneumonia","worst"),3)
states[50:54]
states <- as.character(sort(unique(mortality$state)))
outcome.df <- read.csv("Assignment3-data/outcome-of-care-measures.csv",
colClasses="character",
na.strings = "Not Available")
## subset columns of interest: hospital, state and three disease outcomes
mortality <- outcome.df[, c(2, 7, 11,17,23)]
## fix numeric values (now columns: 3:5)
m.df <- sapply(3:5, function(x) as.numeric(mortality[,x]))
mortality <- cbind(mortality[,1:2],m.df)
colnames(mortality) <- c("hospital", "state", "heart_attack",
"heart_failure","pneumonia")
mortality[which(mortality$state == "WI"),]
wisc_pneum <- filter(mortality,state=="WI",pneumonia > 14)
head(wisc_pneum)
wisc_pneum <- arrange(filter(mortality,state=="WI",pneumonia > 14),pneumonia,hospital)
wisc_pneum
worst_pneum <- arrange(filter(mortality,pneumonia > 17),pneumonia,hospital)
worst_pneum
rm(list=ls())
source('~/GitHub/RprogAssign3/rankall.R')
tail(rankall("pneumonia","worst"),3)
ls()
ls()
outcome.df <- read.csv("Assignment3-data/outcome-of-care-measures.csv",
colClasses="character",
na.strings = "Not Available")
## subset columns of interest: hospital, state and three disease outcomes
mortality <- outcome.df[, c(2, 7, 11,17,23)]
## fix numeric values (now columns: 3:5)
m.df <- sapply(3:5, function(x) as.numeric(mortality[,x]))
mortality <- cbind(mortality[,1:2],m.df)
colnames(mortality) <- c("hospital", "state", "heart_attack",
"heart_failure","pneumonia")
## check the 'outcome' arguments is valid; stop() and
outcome <- "pneumonia"
num <- "worst"
### return "invalid outcome" for bad input,
### "missing argment" if missing argument)
if(missing(outcome)) stop("missing argument")
outcome = tolower(outcome)
diseases <- c("heart attack","heart failure","pneumonia")
if(is.na(diseases[match(outcome,diseases)])) stop("invalid outcome")
## sub "_" for space in disease (outcome) name
disease <- sub("\\s+","_",outcome)
## create a vector of valid state names
states <- as.character(sort(unique(mortality$state)))
disease
mort_df <- tbl_df(mortality)
# capture column for outcome argument
disease.cols <- as.vector(sapply(colnames(mort_df), function(x) sub("\\s+","_",x)))
col_disease <- match(disease,disease.cols)
states.list <- lapply(states, function(x) mort_df[mort_df$state == x,c(1,2,col_disease)])
## fix num for "best"
ifelse(num == "worst", num <- length(sorted_s_df$disease), num)
ifelse(num == "best", num <- 1, num)
x <- 43
mystate_df <- states.list[[x]]
colnames(mystate_df) <- c("hospital","state","disease")
filter_s_df <- filter(mystate_df,!is.na(disease))
filter(filter_s_df,hospital == "MAYO CLINIC HEALTH SYSTEM - NORTHLAND, INC")
head(filter_s_df)
match(states,"WI")
length(states)
states(52)
states[52]
x <- 52
mystate_df <- states.list[[x]]
colnames(mystate_df) <- c("hospital","state","disease")
filter_s_df <- filter(mystate_df,!is.na(disease))
filter(filter_s_df,hospital == "MAYO CLINIC HEALTH SYSTEM - NORTHLAND, INC")
sorted_s_df = arrange(filter_s_df,disease,hospital)
sorted_s_df
tail(sorted_s_df)
length(sorted_s_df$disease)
ifelse(num == "worst", num <- length(sorted_s_df$disease), num)
sorted_s_df[num,1:2]
source('~/GitHub/RprogAssign3/rankall.R')
tail(rankall("pneumonia","worst"),3)
rm(list=ls())
rankall <- function(outcome, num = "best") {
require(dplyr)
## read outcome data in downloaded csv file
outcome.df <- read.csv("Assignment3-data/outcome-of-care-measures.csv",
colClasses="character",
na.strings = "Not Available")
## subset columns of interest: hospital, state and three disease outcomes
mortality <- outcome.df[, c(2, 7, 11,17,23)]
## fix numeric values (now columns: 3:5)
m.df <- sapply(3:5, function(x) as.numeric(mortality[,x]))
mortality <- cbind(mortality[,1:2],m.df)
colnames(mortality) <- c("hospital", "state", "heart_attack",
"heart_failure","pneumonia")
## check the 'outcome' arguments is valid; stop() and
### return "invalid outcome" for bad input,
### "missing argment" if missing argument)
if(missing(outcome)) stop("missing argument")
outcome = tolower(outcome)
diseases <- c("heart attack","heart failure","pneumonia")
if(is.na(diseases[match(outcome,diseases)])) stop("invalid outcome")
## sub "_" for space in disease (outcome) name
disease <- sub("\\s+","_",outcome)
## create a vector of valid state names
states <- as.character(sort(unique(mortality$state)))
mort_df <- tbl_df(mortality)
# capture column for outcome argument
disease.cols <- as.vector(sapply(colnames(mort_df), function(x) sub("\\s+","_",x)))
col_disease <- match(disease,disease.cols)
states.list <- lapply(states, function(x) mort_df[mort_df$state == x,c(1,2,col_disease)])
## fix num for "best"
ifelse(num == "best", num <- 1, num)
## create list of states with outcome rank = num
output.list <- lapply( 1:length(states), function(x,y,z) FUN={
mystate_df <- states.list[[x]]
colnames(mystate_df) <- c("hospital","state","disease")
filter_s_df <- filter(mystate_df,!is.na(disease))
sorted_s_df = arrange(filter_s_df,disease,hospital)
ifelse(num == "worst", num <- length(sorted_s_df$disease), num)
sorted_s_df[num,1:2]
}, y=disease, z=num)
output.df <- rbind_all(output.list)
}
head(rankall("heart attack",20),10)
tail(rankall("pneumonia","worst"),3)
tail(rankall("heart failure"),10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
quit()
